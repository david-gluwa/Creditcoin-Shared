// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Transfer.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Transfer.proto</summary>
public static partial class TransferReflection {

  #region Descriptor
  /// <summary>File descriptor for Transfer.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static TransferReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5UcmFuc2Zlci5wcm90byKmAQoIVHJhbnNmZXISEgoKYmxvY2tjaGFpbhgB",
          "IAEoCRITCgtzcmNfYWRkcmVzcxgCIAEoCRITCgtkc3RfYWRkcmVzcxgDIAEo",
          "CRINCgVvcmRlchgEIAEoCRIOCgZhbW91bnQYBSABKAkSCgoCdHgYBiABKAkS",
          "DQoFYmxvY2sYByABKAkSEQoJcHJvY2Vzc2VkGAggASgIEg8KB3NpZ2hhc2gY",
          "CSABKAliBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Transfer), global::Transfer.Parser, new[]{ "Blockchain", "SrcAddress", "DstAddress", "Order", "Amount", "Tx", "Block", "Processed", "Sighash" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Transfer : pb::IMessage<Transfer> {
  private static readonly pb::MessageParser<Transfer> _parser = new pb::MessageParser<Transfer>(() => new Transfer());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Transfer> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TransferReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Transfer() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Transfer(Transfer other) : this() {
    blockchain_ = other.blockchain_;
    srcAddress_ = other.srcAddress_;
    dstAddress_ = other.dstAddress_;
    order_ = other.order_;
    amount_ = other.amount_;
    tx_ = other.tx_;
    block_ = other.block_;
    processed_ = other.processed_;
    sighash_ = other.sighash_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Transfer Clone() {
    return new Transfer(this);
  }

  /// <summary>Field number for the "blockchain" field.</summary>
  public const int BlockchainFieldNumber = 1;
  private string blockchain_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Blockchain {
    get { return blockchain_; }
    set {
      blockchain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "src_address" field.</summary>
  public const int SrcAddressFieldNumber = 2;
  private string srcAddress_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SrcAddress {
    get { return srcAddress_; }
    set {
      srcAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "dst_address" field.</summary>
  public const int DstAddressFieldNumber = 3;
  private string dstAddress_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DstAddress {
    get { return dstAddress_; }
    set {
      dstAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 4;
  private string order_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Order {
    get { return order_; }
    set {
      order_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "amount" field.</summary>
  public const int AmountFieldNumber = 5;
  private string amount_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Amount {
    get { return amount_; }
    set {
      amount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "tx" field.</summary>
  public const int TxFieldNumber = 6;
  private string tx_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Tx {
    get { return tx_; }
    set {
      tx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "block" field.</summary>
  public const int BlockFieldNumber = 7;
  private string block_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Block {
    get { return block_; }
    set {
      block_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "processed" field.</summary>
  public const int ProcessedFieldNumber = 8;
  private bool processed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Processed {
    get { return processed_; }
    set {
      processed_ = value;
    }
  }

  /// <summary>Field number for the "sighash" field.</summary>
  public const int SighashFieldNumber = 9;
  private string sighash_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Sighash {
    get { return sighash_; }
    set {
      sighash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Transfer);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Transfer other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Blockchain != other.Blockchain) return false;
    if (SrcAddress != other.SrcAddress) return false;
    if (DstAddress != other.DstAddress) return false;
    if (Order != other.Order) return false;
    if (Amount != other.Amount) return false;
    if (Tx != other.Tx) return false;
    if (Block != other.Block) return false;
    if (Processed != other.Processed) return false;
    if (Sighash != other.Sighash) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Blockchain.Length != 0) hash ^= Blockchain.GetHashCode();
    if (SrcAddress.Length != 0) hash ^= SrcAddress.GetHashCode();
    if (DstAddress.Length != 0) hash ^= DstAddress.GetHashCode();
    if (Order.Length != 0) hash ^= Order.GetHashCode();
    if (Amount.Length != 0) hash ^= Amount.GetHashCode();
    if (Tx.Length != 0) hash ^= Tx.GetHashCode();
    if (Block.Length != 0) hash ^= Block.GetHashCode();
    if (Processed != false) hash ^= Processed.GetHashCode();
    if (Sighash.Length != 0) hash ^= Sighash.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Blockchain.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Blockchain);
    }
    if (SrcAddress.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(SrcAddress);
    }
    if (DstAddress.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(DstAddress);
    }
    if (Order.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Order);
    }
    if (Amount.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Amount);
    }
    if (Tx.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Tx);
    }
    if (Block.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(Block);
    }
    if (Processed != false) {
      output.WriteRawTag(64);
      output.WriteBool(Processed);
    }
    if (Sighash.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(Sighash);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Blockchain.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Blockchain);
    }
    if (SrcAddress.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SrcAddress);
    }
    if (DstAddress.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DstAddress);
    }
    if (Order.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Order);
    }
    if (Amount.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Amount);
    }
    if (Tx.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Tx);
    }
    if (Block.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Block);
    }
    if (Processed != false) {
      size += 1 + 1;
    }
    if (Sighash.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Sighash);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Transfer other) {
    if (other == null) {
      return;
    }
    if (other.Blockchain.Length != 0) {
      Blockchain = other.Blockchain;
    }
    if (other.SrcAddress.Length != 0) {
      SrcAddress = other.SrcAddress;
    }
    if (other.DstAddress.Length != 0) {
      DstAddress = other.DstAddress;
    }
    if (other.Order.Length != 0) {
      Order = other.Order;
    }
    if (other.Amount.Length != 0) {
      Amount = other.Amount;
    }
    if (other.Tx.Length != 0) {
      Tx = other.Tx;
    }
    if (other.Block.Length != 0) {
      Block = other.Block;
    }
    if (other.Processed != false) {
      Processed = other.Processed;
    }
    if (other.Sighash.Length != 0) {
      Sighash = other.Sighash;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Blockchain = input.ReadString();
          break;
        }
        case 18: {
          SrcAddress = input.ReadString();
          break;
        }
        case 26: {
          DstAddress = input.ReadString();
          break;
        }
        case 34: {
          Order = input.ReadString();
          break;
        }
        case 42: {
          Amount = input.ReadString();
          break;
        }
        case 50: {
          Tx = input.ReadString();
          break;
        }
        case 58: {
          Block = input.ReadString();
          break;
        }
        case 64: {
          Processed = input.ReadBool();
          break;
        }
        case 74: {
          Sighash = input.ReadString();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
